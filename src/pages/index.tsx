import Head from "next/head";
import { Inter } from "next/font/google";
import { Key, useEffect, useState } from "react";

type subject = {
	subject: string;
	assignments: any[];
};
type assignment = {
	name: string;
	completed?: boolean;
};

export default function Home() {
	const [subjects, setSubjects] = useState<any>([]);

	useEffect(() => {
		fetch("/api/subject")
			.then((res) => res.json())
			.then((res) => setSubjects(res.data));
	}, []);

	const createSubject = (event: any) => {
		event.preventDefault();
		const subject = event.target.subject.value;
		fetch("/api/subject", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				subject: subject,
			}),
		})
			.then((res) => res.json())
			.then((res) => {
				setSubjects([...subjects, res.data]);
			});
	};

	const addAssignment = (subject: string, event: any) => {
		event.preventDefault();
		console.log(event);
		const assignment = event.target.assignment.value
		fetch("/api/subject/assignment", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				subject: subject,
				assignment: assignment,
			}),
		})
			.then((res) => res.json())
			.then((res) => {
				setSubjects((old: any) => [
					...old.filter((e:any) => e.subject !== subject),
					res.data,
				]);
				event.target.reset();
			});
	};

	const markCompleted = (subject:any, assignment:any, completed: boolean) => {
		fetch("/api/subject/assignment", {
			method: "PATCH",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				subject: subject,
				assignment: assignment,
				completed:completed
			}),
		})
			.then((res) => res.json())
			.then((res) => {
				setSubjects((old: any) => [
					...old.filter((e:any) => e.subject !== subject),
					res.data,
				]);
			});
	}
	return (
		<>
			<Head>
				<title>Assignment Tracker</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<form onSubmit={createSubject}>
				<label htmlFor="subject">Subject: </label>
				<input name="subject" type="text"></input>
				<button type="submit">Add</button>
			</form>
			<ul>
				{subjects.sort((first: subject, second:subject) => {
							return first.subject.localeCompare(second.subject as string);
						}).map((eachSub: subject) => (
					<li key={eachSub.subject as Key}>
						{eachSub.subject}{" "}
						<ul>
							{eachSub.assignments.map((eachAssign: assignment) => (
								<li
									key={eachAssign.name as Key}
									style={{ textDecoration: eachAssign.completed ? "line-through" : "none"}}
									onClick={() => markCompleted(eachSub.subject,eachAssign.name, true)}
								>
									{eachAssign.name}
								</li>
							))}
							
						<form onSubmit={(e) => addAssignment(eachSub.subject as string, e)}>
							<input name="assignment"></input>
							<button type="submit">Add</button>
						</form>
						</ul>
					</li>
				))}
			</ul>
		</>
	);
}
